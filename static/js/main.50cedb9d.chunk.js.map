{"version":3,"sources":["serviceWorker.js","component/Card.js","component/CardList.js","component/robots.js","component/SearchBox.js","component/Scroll.js","component/ErrorBoundry.js","container/App.js","index.js"],"names":["Boolean","window","location","hostname","match","card","name","id","email","className","alt","src","CardList","robots","CardArray","map","element","i","Card","key","username","SearchBox","SerachField","SearchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","SearchField","target","value","filteredRobots","filter","toLowerCase","includes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCjBN,IAceC,EAdF,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,GAAGC,EAAS,EAATA,MAEtB,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAK,UAAUC,IAAG,+BAA0BJ,EAA1B,cACvB,6BACC,4BAAKD,GACL,2BAAIE,MCMOI,EAXE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACZC,EAAUD,EAAOE,KAAI,SAACC,EAAQC,GACnC,OAAO,kBAACC,EAAD,CAAMC,IAAKF,EAAGX,KAAMO,EAAOI,GAAGX,KAAMC,GAAIM,EAAOI,GAAGV,GAAIC,MAAOK,EAAOI,GAAGT,WAE/E,OACC,6BACIM,I,4BCTOD,EAAS,CACpB,CACEN,GAAI,EACJD,KAAM,gBACNc,SAAU,OACVZ,MAAO,qBAET,CACED,GAAI,EACJD,KAAM,eACNc,SAAU,YACVZ,MAAO,qBAET,CACED,GAAI,EACJD,KAAM,mBACNc,SAAU,WACVZ,MAAO,sBAET,CACED,GAAI,EACJD,KAAM,mBACNc,SAAU,WACVZ,MAAO,6BAET,CACED,GAAI,EACJD,KAAM,mBACNc,SAAU,SACVZ,MAAO,4BAET,CACED,GAAI,EACJD,KAAM,uBACNc,SAAU,mBACVZ,MAAO,2BAET,CACED,GAAI,EACJD,KAAM,kBACNc,SAAU,eACVZ,MAAO,0BAET,CACED,GAAI,EACJD,KAAM,2BACNc,SAAU,gBACVZ,MAAO,wBAET,CACED,GAAI,EACJD,KAAM,kBACNc,SAAU,WACVZ,MAAO,2BAET,CACED,GAAI,GACJD,KAAM,qBACNc,SAAU,iBACVZ,MAAO,2BC/CIa,EAXC,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAE7B,OACC,yBAAKd,UAAU,OACd,2BAAOA,UAAU,mCACjBe,KAAK,OACLC,YAAY,gBACZC,SAAUH,MCAEI,G,MAPF,SAACC,GACd,OACC,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAO,UACjEJ,EAAMK,YCaMC,E,kDAfd,WAAYN,GAAO,IAAD,8BACjB,cAAMA,IACDO,MAAM,CAACC,UAAS,GAFJ,E,8DAKAC,EAAMC,GACvBC,KAAKC,SAAS,CAACJ,UAAS,K,+BAGxB,OAAGG,KAAKJ,MAAMC,SACL,2DAEDG,KAAKX,MAAMK,a,GAbMQ,aCwCZC,E,kDAjCb,aAAc,IAAD,8BACX,gBAMJC,eAAe,SAACC,GACZ,EAAKJ,SAAS,CAACK,YAAYD,EAAME,OAAOC,SANxC,EAAKZ,MAAQ,CACXtB,OAAQ,GACRgC,YAAY,IAJH,E,gEAWXN,KAAKC,SAAS,CAAC3B,OAAOA,M,+BAEf,IAAD,OACAmC,EAAeT,KAAKJ,MAAMtB,OAAOoC,QAAO,SAAApC,GAC9C,OAAOA,EAAOP,KAAK4C,cAAcC,SAAS,EAAKhB,MAAMU,YAAYK,kBAGjE,OACE,yBAAKzC,UAAU,OACb,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWc,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU9B,OAAQmC,W,GAzBZP,a,MCAlBW,IAASC,OACP,kBAAC,EAAD,CAAKzC,SAAUA,IACf0C,SAASC,eAAe,SR0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzB,GACL0B,QAAQ1B,MAAMA,EAAM2B,a","file":"static/js/main.50cedb9d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nconst card = ({name,id,email})=>{\r\n\t\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt ='Loading' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h3>{name}</h3>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default card;","import React from 'react';\r\nimport Card from '../component/Card';\r\n\r\nconst CardList = ({robots})=>{\r\n\tconst CardArray=robots.map((element,i)=>{\r\n\t\treturn <Card key={i} name={robots[i].name} id={robots[i].id} email={robots[i].email}/>;\r\n\t});\r\n\treturn(\r\n\t\t<div>\r\n\t\t  \t{CardArray}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\r\nconst SearchBox=({SerachField,SearchChange})=>{\r\n\t\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue' \r\n\t\t\ttype='text' \r\n\t\t\tplaceholder='Search Robots'\r\n\t\t\tonChange={SearchChange} />\r\n\t\t</div>\r\n);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nconst Scroll=(props)=>{\r\nreturn(\r\n\t<div style={{overflow: 'scroll' ,border: '2px solid black' ,height:'500px'}}>\r\n\t\t{props.children}\r\n\t</div>\r\n);\r\n};\r\nexport default Scroll;","import React,{Component} from 'react';\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state={hasError:false}\r\n\r\n\t}\r\n\tcomponentDidCatch(error,info){\r\n\t\tthis.setState={hasError:true}\r\n\t}\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn (<h1>Oooops!Something went wrong</h1>);\r\n\t\t}\r\n\t\treturn (this.props.children);\r\n\t}\r\n}\r\nexport default ErrorBoundry;","import React,{Component} from 'react';\nimport {robots} from '../component/robots';\nimport SearchBox from '../component/SearchBox';\nimport CardList from '../component/CardList';\nimport '../container/App.css';\nimport Scroll from '../component/Scroll';\nimport ErrorBoundry from '../component/ErrorBoundry'\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      robots: [],\n      SearchField:''\n  }\n}\nonSearchChange=(event)=> {\n    this.setState({SearchField:event.target.value})\n  }\n  componentDidMount(){\n    this.setState({robots:robots})\n  }\n  render(){\n    const filteredRobots=this.state.robots.filter(robots=>{\n    return robots.name.toLowerCase().includes(this.state.SearchField.toLowerCase())\n    })\n\n    return(\n      <div className='tc '>\n        <h2 className='f1'>ROBO_FRIENDS</h2>\n        <SearchBox SearchChange={this.onSearchChange}/>\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots}/>\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n      );\n    }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport CardList from './component/CardList';\nimport App from './container/App';\nimport './index.css'\nReactDOM.render(\n  <App CardList={CardList}/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}